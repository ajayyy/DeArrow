{"version":3,"file":"documentScriptInjector.js","mappings":"gHAAA,gBACA,UAEA,wBAA6BA,GACzB,MAAMC,EAAYC,SAASC,cAAc,UACzCF,EAAUG,GAAK,+BACfH,EAAUI,aAAa,UAAW,EAAAC,SAClCL,EAAUM,UAAYP,EAEtB,MAAMQ,EAAQN,SAASM,MAAQN,SAASO,gBAClCC,EAAiBR,SAASS,eAAe,gCACzCC,EAAwBF,aAAc,EAAdA,EAAgBG,aAAa,YACvDL,GAAUE,KAAkB,IAAAI,eAAc,EAAAR,QAASM,QAAAA,EAAyB,MACxEF,IACAT,EAAUI,aAAa,WAAY,QACnCK,EAAeK,UAGnBP,EAAKQ,YAAYf,GAEzB,C,uFCpBA,yBAA8BgB,EAAoBC,GAC9C,MAAMC,EAAkBF,EAAWG,MAAM,KACnCC,EAAkBH,EAAWE,MAAM,KACzC,GAAID,EAAgBG,SAAWD,EAAgBC,OAAQ,OAAO,EAE9D,IAAK,IAAIC,EAAI,EAAGA,EAAIJ,EAAgBG,OAAQC,IAAK,CAC7C,MAAMC,EAAiBC,SAASN,EAAgBI,IAC1CG,EAAiBD,SAASJ,EAAgBE,IAEhD,GAAIC,EAAiBE,EACjB,OAAO,EACJ,GAAIF,EAAiBE,EACxB,OAAO,C,CAIf,OAAO,CACX,C,wzgBChBIC,EAA2B,CAAC,EAGhC,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAaE,QAGrB,IAAIC,EAASN,EAAyBE,GAAY,CAGjDG,QAAS,CAAC,GAOX,OAHAE,EAAoBL,GAAUI,EAAQA,EAAOD,QAASJ,GAG/CK,EAAOD,OACf,C,MCtBA,gBACA,UAEsD,IAAlDG,OAAOC,QAAQC,cAAcC,mBAC7B,IAAAC,cAAaC,E","sources":["webpack:///./maze-utils/src/scriptInjector.ts","webpack:///./maze-utils/src/versionHigher.ts","webpack:///webpack/bootstrap","webpack:///./src/documentScriptInjector.ts"],"sourcesContent":["import { versionHigher } from \"./versionHigher\";\nimport { version } from \"./version.json\";\n\nexport function injectScript(src: string) {\n    const docScript = document.createElement(\"script\");\n    docScript.id = \"sponsorblock-document-script\";\n    docScript.setAttribute(\"version\", version)\n    docScript.innerHTML = src;\n\n    const head = (document.head || document.documentElement);\n    const existingScript = document.getElementById(\"sponsorblock-document-script\");\n    const existingScriptVersion = existingScript?.getAttribute(\"version\");\n    if (head && (!existingScript || versionHigher(version, existingScriptVersion ?? \"\"))) {\n        if (existingScript) {\n            docScript.setAttribute(\"teardown\", \"true\");\n            existingScript.remove();\n        }\n\n        head.appendChild(docScript);\n    }\n}","export function versionHigher(newVersion: string, oldVersion: string): boolean {\n    const newVersionParts = newVersion.split(\".\");\n    const oldVersionParts = oldVersion.split(\".\");\n    if (newVersionParts.length !== oldVersionParts.length) return true;\n\n    for (let i = 0; i < newVersionParts.length; i++) {\n        const newVersionPart = parseInt(newVersionParts[i]);\n        const oldVersionPart = parseInt(oldVersionParts[i]);\n\n        if (newVersionPart > oldVersionPart) {\n            return true;\n        } else if (newVersionPart < oldVersionPart) {\n            return false;\n        }\n    }\n\n    return false;\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import * as documentScript from \"../dist/js/document.js\";\nimport { injectScript } from \"../maze-utils/src/scriptInjector\";\n\nif (chrome.runtime.getManifest().manifest_version === 2) {\n    injectScript(documentScript)\n}"],"names":["src","docScript","document","createElement","id","setAttribute","version","innerHTML","head","documentElement","existingScript","getElementById","existingScriptVersion","getAttribute","versionHigher","remove","appendChild","newVersion","oldVersion","newVersionParts","split","oldVersionParts","length","i","newVersionPart","parseInt","oldVersionPart","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","chrome","runtime","getManifest","manifest_version","injectScript","documentScript"],"sourceRoot":""}